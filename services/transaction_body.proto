syntax = "proto3";

package services.v1;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

import "services/system_delete.proto";
import "services/system_undelete.proto";
import "services/freeze.proto";

import "services/contract_call.proto";
import "services/contract_create.proto";
import "services/contract_update.proto";

import "services/crypto_add_live_hash.proto";
import "services/crypto_create.proto";
import "services/crypto_delete.proto";
import "services/crypto_delete_live_hash.proto";
import "services/crypto_transfer.proto";
import "services/crypto_update.proto";

import "services/file_append.proto";
import "services/file_create.proto";
import "services/file_delete.proto";
import "services/file_update.proto";

import "services/duration.proto";
import "services/basic_types.proto";
import "services/contract_delete.proto";

import "services/consensus_create_topic.proto";
import "services/consensus_update_topic.proto";
import "services/consensus_delete_topic.proto";
import "services/consensus_submit_message.proto";

import "services/unchecked_submit.proto";

import "services/token_create.proto";
import "services/token_freeze_account.proto";
import "services/token_unfreeze_account.proto";
import "services/token_grant_kyc.proto";
import "services/token_revoke_kyc.proto";
import "services/token_delete.proto";
import "services/token_update.proto";
import "services/token_mint.proto";
import "services/token_burn.proto";
import "services/token_wipe_account.proto";
import "services/token_associate.proto";
import "services/token_dissociate.proto";

import "services/schedule_create.proto";
import "services/schedule_delete.proto";
import "services/schedule_sign.proto";

/* A single transaction. All transaction types are possible here. */
message TransactionBody {
  TransactionID transaction_id = 1; // The ID for this transaction, which includes the payer's account (the account paying the transaction fee). If two transactions have the same transactionID, they won't both have an effect
  AccountID node_account_id = 2; // The account of the node that submits the client's transaction to the network
  uint64 transaction_fee = 3; // The maximum transaction fee the client is willing to pay
  Duration transaction_valid_duration = 4; //The transaction is invalid if consensusTimestamp > transactionID.transactionValidStart + transactionValidDuration
  bool generate_record = 5 [deprecated = true]; // Should a record of this transaction be generated? (A receipt is always generated, but the record is optional)
  string memo = 6; // Any notes or descriptions that should be put into the record (max length 100)
  oneof data {
    ContractCallTransactionBody contract_call = 7; // Calls a function of a contract instance
    ContractCreateTransactionBody contract_create_instance = 8; // Creates a contract instance
    ContractUpdateTransactionBody contract_update_instance = 9; // Updates a contract
    ContractDeleteTransactionBody contract_delete_instance = 22; //Delete contract and transfer remaining balance into specified account

    CryptoAddLiveHashTransactionBody crypto_add_live_hash = 10; // Attach a new livehash to an account
    CryptoCreateTransactionBody crypto_create_account = 11; // Create a new cryptocurrency account
    CryptoDeleteTransactionBody crypto_delete = 12; // Delete a cryptocurrency account (mark as deleted, and transfer hbars out)
    CryptoDeleteLiveHashTransactionBody crypto_delete_live_hash = 13; // Remove a livehash from an account
    CryptoTransferTransactionBody crypto_transfer = 14; // Transfer amount between accounts
    CryptoUpdateTransactionBody crypto_update_account = 15; // Modify information such as the expiration date for an account

    FileAppendTransactionBody file_append = 16; // Add bytes to the end of the contents of a file
    FileCreateTransactionBody file_create = 17; // Create a new file
    FileDeleteTransactionBody file_delete = 18; // Delete a file (remove contents and mark as deleted until it expires)
    FileUpdateTransactionBody file_update = 19; // Modify information such as the expiration date for a file
    SystemDeleteTransactionBody system_delete = 20; // Hedera administrative deletion of a file or smart contract
    SystemUndeleteTransactionBody system_undelete = 21; //To undelete an entity deleted by SystemDelete
    FreezeTransactionBody freeze = 23; // Freeze the nodes

    ConsensusCreateTopicTransactionBody consensus_create_topic = 24; // Creates a topic
    ConsensusUpdateTopicTransactionBody consensus_update_topic = 25; // Updates a topic
    ConsensusDeleteTopicTransactionBody consensus_delete_topic = 26; // Deletes a topic
    ConsensusSubmitMessageTransactionBody consensus_submit_message = 27; // Submits message to a topic

    UncheckedSubmitBody unchecked_submit = 28;

    TokenCreateTransactionBody token_creation = 29; // Creates a token instance
    TokenFreezeAccountTransactionBody token_freeze = 31; // Freezes account not to be able to transact with a token
    TokenUnfreezeAccountTransactionBody token_unfreeze = 32; // Unfreezes account for a token
    TokenGrantKycTransactionBody token_grant_kyc = 33; // Grants KYC to an account for a token
    TokenRevokeKycTransactionBody token_revoke_kyc = 34; // Revokes KYC of an account for a token
    TokenDeleteTransactionBody token_deletion = 35; // Deletes a token instance
    TokenUpdateTransactionBody token_update = 36; // Updates a token instance
    TokenMintTransactionBody token_mint = 37; // Mints new tokens to a token's treasury account
    TokenBurnTransactionBody token_burn = 38; // Burns tokens from a token's treasury account
    TokenWipeAccountTransactionBody token_wipe = 39; // Wipes amount of tokens from an account
    TokenAssociateTransactionBody token_associate = 40; // Associate tokens to an account
    TokenDissociateTransactionBody token_dissociate = 41; // Dissociate tokens from an account

    ScheduleCreateTransactionBody schedule_create = 42; // Creates a scheduled transaction instance
    ScheduleDeleteTransactionBody schedule_delete = 43; // Deletes a scheduled transaction instance
    ScheduleSignTransactionBody schedule_sign = 44; // Signs a scheduled transaction instance
  }
}
