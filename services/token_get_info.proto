/*-
 *
 * Hedera Network Services Protobuf
 *
 * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package services;

option java_package = "com.hederahashgraph.api.proto";
option java_multiple_files = true;

import "services/basic_types.proto";
import "services/query_header.proto";
import "services/response_header.proto";
import "services/timestamp.proto";
import "services/duration.proto";

/*
 * Gets information about Token instance
 */
message TokenGetInfoQuery {
    // Standard info sent from client to node, including the signed payment,
    // and what kind of response is requested (cost, state proof, both, or
    // neither)
    QueryHeader header = 1;

    // The token for which information is requested. If invalid token is
    // provided, INVALID_TOKEN_ID response is returned.
    TokenID token = 2;
}

/*
 * The metadata about a Token instance
 */
message TokenInfo {
    // ID of the token instance
    TokenID token_i_d = 1;

    // The name of the token. It is a string of ASCII only characters
    string name = 2;

    // The symbol of the token. It is a UTF-8 capitalized alphabetical string
    string symbol = 3;

    // The number of decimal places a token is divisible by
    uint32 decimals = 4;

    // The total supply of tokens that are currently in circulation
    uint64 total_supply = 5;

    // The ID of the account which is set as Treasury
    AccountID treasury = 6;

    // The key which can perform update/delete operations on the token. If
    // empty, the token can be perceived as immutable (not being able to be
    // updated/deleted)
    Key admin_key = 7;

    // The key which can grant or revoke KYC of an account for the token's
    // transactions. If empty, KYC is not required, and KYC grant or revoke
    // operations are not possible.
    Key kyc_key = 8;

    // The key which can freeze or unfreeze an account for token transactions.
    // If empty, freezing is not possible
    Key freeze_key = 9;

    // The key which can wipe token balance of an account.
    // If empty, wipe is not possible
    Key wipe_key = 10;

    // The key which can change the supply of a token. The key is used to sign
    // Token Mint/Burn operations
    Key supply_key = 11;

    // The default Freeze status (not applicable, frozen or unfrozen) of
    // Hedera accounts relative to this token. FreezeNotApplicable is returned
    // if Token Freeze Key is empty. Frozen is returned if Token Freeze Key is
    // set and defaultFreeze is set to true. Unfrozen is returned if Token
    // Freeze Key is set and defaultFreeze is set to false
    TokenFreezeStatus default_freeze_status = 12;

    // The default KYC status (KycNotApplicable or Revoked) of Hedera accounts
    // relative to this token. KycNotApplicable is returned if KYC key is not
    // set, otherwise Revoked
    TokenKycStatus default_kyc_status = 13;

    // Specifies whether the token was deleted or not
    bool deleted = 14;

    // An account which will be automatically charged to renew the token's
    // expiration, at autoRenewPeriod interval
    AccountID auto_renew_account = 15;

    // The interval at which the auto-renew account will be charged to extend
    // the token's expiry
    Duration auto_renew_period = 16;

    // The epoch second at which the token will expire
    Timestamp expiry = 17;

    // The memo associated with the token
    string memo = 18;
}

/*
 * Response when the client sends the node TokenGetInfoQuery
 */
message TokenGetInfoResponse {
    // Standard response from node to client, including the requested fields:
    // cost, or state proof, or both, or neither
    ResponseHeader header = 1;

    // The information requested about this token instance
    TokenInfo token_info = 2;
}
