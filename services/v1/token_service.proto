syntax = "proto3";

package services.v1;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

option java_package = "com.hederahashgraph.service.proto.java";
option java_multiple_files = true;

import "services/v1/query.proto";
import "services/v1/response.proto";
import "services/v1/transaction_response.proto";
import "services/v1/transaction.proto";

/* Transactions and queries for the Token Service */
service TokenService {
    // Creates a new Token by submitting the transaction
    rpc CreateToken (Transaction) returns (TransactionResponse);
    // Updates the account by submitting the transaction
    rpc UpdateToken (Transaction) returns (TransactionResponse);
    // Mints an amount of the token to the defined treasury account
    rpc MintToken (Transaction) returns (TransactionResponse);
    // Burns an amount of the token from the defined treasury account
    rpc BurnToken (Transaction) returns (TransactionResponse);
    // Deletes a Token
    rpc DeleteToken (Transaction) returns (TransactionResponse);
    // Wipes the provided amount of tokens from the specified Account ID
    rpc WipeTokenAccount (Transaction) returns (TransactionResponse);
    // Freezes the transfer of tokens to or from the specified Account ID
    rpc FreezeTokenAccount (Transaction) returns (TransactionResponse);
    // Unfreezes the transfer of tokens to or from the specified Account ID
    rpc UnfreezeTokenAccount (Transaction) returns (TransactionResponse);
    // Flags the provided Account ID as having gone through KYC
    rpc GrantKycToTokenAccount (Transaction) returns (TransactionResponse);
    // Removes the KYC flag of the provided Account ID
    rpc RevokeKycFromTokenAccount (Transaction) returns (TransactionResponse);
    // Associates tokens to an account
    rpc AssociateTokens (Transaction) returns (TransactionResponse);
    // Dissociates tokens from an account
    rpc DissociateTokens (Transaction) returns (TransactionResponse);

    // Retrieves the metadata of a token
    rpc GetTokenInfo (Query) returns (Response);
}
