syntax = "proto3";

package services.v1;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

option java_package = "com.hederahashgraph.api.proto.java";
option java_multiple_files = true;

import "services/v1/timestamp.proto";
import "services/v1/basic_types.proto";
import "services/v1/transaction_receipt.proto";
import "services/v1/crypto_transfer.proto";
import "services/v1/contract_call_local.proto";

/* Response when the client sends the node TransactionGetRecordResponse */
message TransactionRecord {
    TransactionReceipt receipt = 1; // The status (reach consensus, or failed, or is unknown) and the ID of any new account/file/instance created.
    bytes transaction_hash = 2; // The hash of the Transaction that executed (not the hash of any Transaction that failed for having a duplicate TransactionID)
    Timestamp consensus_timestamp = 3; // The consensus timestamp (or null if didn't reach consensus yet)
    TransactionID transaction_id = 4; // The ID of the transaction this record represents
    string memo = 5; // The memo that was submitted as part of the transaction (max 100 bytes)
    uint64 transaction_fee = 6; // The actual transaction fee charged, not the original transactionFee value from TransactionBody
    oneof body {
        ContractFunctionResult contract_call_result = 7; // Record of the value returned by the smart contract function (if it completed and didn't fail) from ContractCallTransaction
        ContractFunctionResult contract_create_result = 8; // Record of the value returned by the smart contract constructor (if it completed and didn't fail) from ContractCreateTransaction
    }
    TransferList transfer_list = 10; // All hbar transfers as a result of this transaction, such as fees, or transfers performed by the transaction, or by a smart contract it calls, or by the creation of threshold records that it triggers.
    repeated TokenTransferList token_transfer_lists = 11; // All Token transfers as a result of this transaction
    ScheduleID schedule_ref = 12; // Reference to the scheduled transaction ID that this transaction record represent
}
